// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Testing hasRole directive with handler overriding should override the hasRole default handler correctly and throw an error 1`] = `
Array [
  [GraphQLError: Roles passed: FOO, BAR],
]
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a mutation with the necessary roles 1`] = `
Object {
  "protectedMutation": "@MUTATION Input: foo Protected Input: undefined",
}
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a mutation's input with necessary roles 1`] = `
Object {
  "protectedMutation": "@MUTATION Input: foo Protected Input: bar",
}
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a query with the necessary roles 1`] = `
Object {
  "protectedQuery": "@QUERY Input: foo Protected Input: undefined",
}
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a query's input with necessary roles 1`] = `
Object {
  "protectedQuery": "@QUERY Input: foo Protected Input: undefined",
}
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a type's field with a resolver with the necessary roles 1`] = `
Object {
  "unprotectedQuery": Object {
    "protectedFieldWithResolver": "protectedFieldWithResolver",
  },
}
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a type's field with a resolver without the necessary roles 1`] = `
Array [
  [GraphQLError: Insufficient roles. Missing one of these: ADMIN],
]
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a type's field without a resolver with the necessary roles 1`] = `
Object {
  "unprotectedQuery": Object {
    "protectedFieldWithoutResolver": "protectedFieldWithoutResolver",
  },
}
`;

exports[`Testing hasRole directive without handler overriding should allow accessing a type's field without a resolver without the necessary roles 1`] = `
Array [
  [GraphQLError: Insufficient roles. Missing one of these: ADMIN],
]
`;

exports[`Testing hasRole directive without handler overriding should prevent accessing a mutation without the necessary roles 1`] = `
Array [
  [GraphQLError: Insufficient roles. Missing one of these: ADMIN, SUPER_ADMIN],
]
`;

exports[`Testing hasRole directive without handler overriding should prevent accessing a mutation's input without necessary roles 1`] = `
Array [
  [GraphQLError: Insufficient roles. Missing one of these: SUPER_ADMIN],
]
`;

exports[`Testing hasRole directive without handler overriding should prevent accessing a query without the necessary roles 1`] = `
Array [
  [GraphQLError: Insufficient roles. Missing one of these: USER],
]
`;

exports[`Testing hasRole directive without handler overriding should prevent accessing a query's input without necessary roles 1`] = `
Array [
  [GraphQLError: Insufficient roles. Missing one of these: SUPER_ADMIN],
]
`;
